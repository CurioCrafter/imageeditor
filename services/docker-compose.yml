version: '3.8'

services:
  # AI Inference Service
  ai-inference:
    build:
      context: ./ai-inference
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - MODEL_REGISTRY_URL=http://model-registry:8081
      - GPU_ENABLED=true
      - MAX_CONCURRENT_INFERENCES=4
      - LOG_LEVEL=INFO
    volumes:
      - ai-models:/app/models
      - ai-cache:/app/cache
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - ai-network
    depends_on:
      - model-registry
      - redis

  # Model Registry Service
  model-registry:
    build:
      context: ./model-registry
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - STORAGE_PATH=/app/models
      - DB_CONNECTION=postgresql://postgres:password@postgres:5432/modelregistry
      - LOG_LEVEL=INFO
    volumes:
      - ai-models:/app/models
    networks:
      - ai-network
    depends_on:
      - postgres

  # Collaboration Service
  collaboration:
    build:
      context: ./collaboration
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - REDIS_URL=redis://redis:6379
      - DB_CONNECTION=postgresql://postgres:password@postgres:5432/collaboration
      - LOG_LEVEL=INFO
    networks:
      - ai-network
    depends_on:
      - redis
      - postgres

  # Asset Management Service
  assets:
    build:
      context: ./assets
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - STORAGE_PATH=/app/assets
      - DB_CONNECTION=postgresql://postgres:password@postgres:5432/assets
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - LOG_LEVEL=INFO
    volumes:
      - ai-assets:/app/assets
    networks:
      - ai-network
    depends_on:
      - postgres
      - minio

  # Authentication Service
  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - JWT_SECRET=your-super-secret-jwt-key
      - DB_CONNECTION=postgresql://postgres:password@postgres:5432/auth
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    networks:
      - ai-network
    depends_on:
      - postgres
      - redis

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=imageeditor
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ai-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ai-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - ai-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - ai-network
    depends_on:
      - ai-inference
      - collaboration
      - assets
      - auth

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - ai-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - ai-network
    depends_on:
      - prometheus

volumes:
  ai-models:
    driver: local
  ai-cache:
    driver: local
  ai-assets:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
